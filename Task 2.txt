1.1)
package org.guviTask;

//class person 
public class Person {
	// data members
	private String name;
	private int age;

	// default constructor
	public Person() {
		// making age default by initializing in the no-arg constructor
	}

	// parameterised construtor
	public Person(String name, int age) {
		this.name = name;
		this.age = age;
	}

	public void setName(String name) {
		this.name = name;
	}

	// method to display the Name and Age of the Person. this method can accessed by
	// object creation
	public void display(String name,int age) {
		System.out.println("Name :"+name+" "+"age :"+age);
	}

	public static void main(String[] args) {
		Person p1 = new Person("Srinath", 22);
		p1.display();

		
		
	}
}
Output :
Name :Srinath age :22

1.2)
package org.guviTask;

import java.util.Scanner;

//class XYZ
public class XYZ {
	// method to Calculate total amount of the products price
	public double calculateAmount(Product[] arrayProducts) {
		double totalAmount = 0.00;
		for (int i = 0; i < arrayProducts.length; i++) {
			totalAmount += (arrayProducts[i].getQuantity() * arrayProducts[i].getPrice());
		}
		return totalAmount;
	}

	public static void main(String[] args) {
		// scanner class to take input from user
		Scanner scan = new Scanner(System.in);

		System.out.println("Enter number of products want to insert in Cart/array :");

		int size = scan.nextInt();
		// array with dynamic size of Products
		Product[] arrayProducts = new Product[size];

		// user input of values for Product properties in array iteration
		for (int i = 0; i < size; i++) {

			System.out.println("Enter Product " + (i + 1) + " ID:");
			int pid = scan.nextInt();
			System.out.println("Enter Product " + (i + 1) + " Price:");
			double price = scan.nextDouble();
			System.out.println("Enter Product " + (i + 1) + " quantity:");
			int qunatity = scan.nextInt();
			arrayProducts[i] = new Product(pid, price, qunatity);

		}

		// to find the max product id with highest price
		double maxPrice = arrayProducts[0].getPrice();
		int id = 0;

		for (int i = 1; i < arrayProducts.length; i++) {
			if (arrayProducts[i].getPrice() > maxPrice) {
				maxPrice = arrayProducts[i].getPrice();
				id = arrayProducts[i].getPid();
			}
		}
		// id with higesht price in Product array print statement
		System.out.println("Pid with Highest Price of " + maxPrice + " is " + id);
		// creation of object for class XYZ
		XYZ xyz = new XYZ();
		// calling calculateAmount method by object reference
		System.out.println("Total Amount spent on all Products is :" + xyz.calculateAmount(arrayProducts));
		scan.close();
	}

}
Output :
Enter number of products want to insert in Cart/array :
5
Enter Product 1 ID:
101
Enter Product 1 Price:
245,5
Enter Product 1 quantity:
6
Enter Product 2 ID:
124
Enter Product 2 Price:
124,6
Enter Product 2 quantity:
4
Enter Product 3 ID:
153
Enter Product 3 Price:
178,9
Enter Product 3 quantity:
5
Enter Product 4 ID:
163
Enter Product 4 Price:
421,4
Enter Product 4 quantity:
3
Enter Product 5 ID:
143
Enter Product 5 Price:
578,6
Enter Product 5 quantity:
2
Pid with Highest Price of 578.6 is 143
Total Amount spent on all Products is :5287.3

1.3)
package org.guviTask;

//class Account
public class Account {
	// datamember
	double balance;

	// no argument constructor
	public Account() {

	}

	// argument constructor
	public Account(double balance) {
		this.balance = balance;
	}

	// method to deposit amount to Account
	public void depositAmount(double amount) {
		if (amount > 0) {
			balance += amount;
			System.out.println("Amount deposited :" + amount);
		} else {
			System.out.println("Inavalid Amount");
		}
	}

	// method to withdraw amount from Account
	public void withdrawAmount(double amount) {
		if (amount > 0) {
			if (balance > amount) {
				balance -= amount;
				System.out.println("Amount withdrawn :" + amount);
			} else {
				System.out.println("Insufficient Balance");
			}
		} else {
			System.out.println("Invalid Amount");
		}
	}

	// method to display balance of Account
	public void displayBalance() {
		System.out.println("Balance is :" + balance);
	}

	public static void main(String[] args) {
		// object instantiation and accesing methods of Account class
		Account a1 = new Account(2500);
		a1.displayBalance();
		a1.depositAmount(500);
		a1.displayBalance();
		a1.withdrawAmount(1500);
		a1.displayBalance();
		a1.depositAmount(3500);
		a1.displayBalance();
		a1.withdrawAmount(700);
		a1.displayBalance();
	}

}
Output :
Balance is :2500.0
Amount deposited :500.0
Balance is :3000.0
Amount withdrawn :1500.0
Balance is :1500.0
Amount deposited :3500.0
Balance is :5000.0
Amount withdrawn :700.0
Balance is :4300.0

1.4)
package org.guviTask;

//class person
public class Person {
	// data members
	private String name;
	private int age;

	// default constructor
	public Person() {
		// making age default by initializing in the no-arg constructor
		this.age = 18;
	}

	// parameterised construtor for initializing name and age datamembers
	public Person(String name, int age) {
		System.out.println("Parent Person class Constructor called");
		this.name = name;
		this.age = age;
	}
}
package org.guviTask;

// inheritance class Employee (child class)
public class Employee extends Person {
	// data members
	private int employeeID;
	private double salary;

	// arg constructor to access Person class and intialize attributes
	public Employee(String name, int age, int employeeID, double salary) {
		// super keyword to access the parent class constructor and instantite the
		// Parent Person Class with name and age parameters passing in it
		super(name, age);
		System.out.println("Child class Employee class constructor called");
		this.employeeID = employeeID;
		this.salary = salary;
	}

	public static void main(String[] args) {
		// object instantiation for Employee class
		Employee emp1 = new Employee("Rohit", 26, 0460, 30000);
		Employee emp2 = new Employee("Gnan Sai", 27, 0474, 40000);
	}

}
Output :
Parent Person class Constructor called
Child class Employee class constructor called
Parent Person class Constructor called
Child class Employee class constructor called